"""
Copyright 2018-2019 Telenav (http://telenav.com)

This Source Code Form is subject to the terms of the Mozilla Public
License, v. 2.0. If a copy of the MPL was not distributed with this
file, You can obtain one at http://mozilla.org/MPL/2.0/.
"""
# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
import grpc
from grpc.framework.common import cardinality
from grpc.framework.interfaces.face import utilities as face_utilities

import inference_service_pb2 as inference__service__pb2
import orbb_metadata_pb2 as orbb__metadata__pb2


class InferenceServiceStub(object):

  def __init__(self, channel):
    """Constructor.

    Args:
      channel: A grpc.Channel.
    """
    self.process = channel.unary_unary(
        '/orbb.InferenceService/process',
        request_serializer=inference__service__pb2.DetectionRequest.SerializeToString,
        response_deserializer=orbb__metadata__pb2.Metadata.FromString,
        )


class InferenceServiceServicer(object):

  def process(self, request, context):
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')


def add_InferenceServiceServicer_to_server(servicer, server):
  rpc_method_handlers = {
      'process': grpc.unary_unary_rpc_method_handler(
          servicer.process,
          request_deserializer=inference__service__pb2.DetectionRequest.FromString,
          response_serializer=orbb__metadata__pb2.Metadata.SerializeToString,
      ),
  }
  generic_handler = grpc.method_handlers_generic_handler(
      'orbb.InferenceService', rpc_method_handlers)
  server.add_generic_rpc_handlers((generic_handler,))
