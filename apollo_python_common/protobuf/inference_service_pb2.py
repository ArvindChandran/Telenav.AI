"""
Copyright 2018-2019 Telenav (http://telenav.com)

This Source Code Form is subject to the terms of the Mozilla Public
License, v. 2.0. If a copy of the MPL was not distributed with this
file, You can obtain one at http://mozilla.org/MPL/2.0/.
"""
# Generated by the protocol buffer compiler.  DO NOT EDIT!
# source: inference_service.proto

import sys
_b=sys.version_info[0]<3 and (lambda x:x) or (lambda x:x.encode('latin1'))
from google.protobuf import descriptor as _descriptor
from google.protobuf import message as _message
from google.protobuf import reflection as _reflection
from google.protobuf import symbol_database as _symbol_database
from google.protobuf import descriptor_pb2
# @@protoc_insertion_point(imports)

_sym_db = _symbol_database.Default()


import orbb_metadata_pb2 as orbb__metadata__pb2


DESCRIPTOR = _descriptor.FileDescriptor(
  name='inference_service.proto',
  package='orbb',
  syntax='proto2',
  serialized_pb=_b('\n\x17inference_service.proto\x12\x04orbb\x1a\x13orbb_metadata.proto\"\'\n\x10\x44\x65tectionRequest\x12\x13\n\x0bimages_path\x18\x01 \x02(\t2G\n\x10InferenceService\x12\x33\n\x07process\x12\x16.orbb.DetectionRequest\x1a\x0e.orbb.Metadata\"\x00')
  ,
  dependencies=[orbb__metadata__pb2.DESCRIPTOR,])
_sym_db.RegisterFileDescriptor(DESCRIPTOR)




_DETECTIONREQUEST = _descriptor.Descriptor(
  name='DetectionRequest',
  full_name='orbb.DetectionRequest',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    _descriptor.FieldDescriptor(
      name='images_path', full_name='orbb.DetectionRequest.images_path', index=0,
      number=1, type=9, cpp_type=9, label=2,
      has_default_value=False, default_value=_b("").decode('utf-8'),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  options=None,
  is_extendable=False,
  syntax='proto2',
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=54,
  serialized_end=93,
)

DESCRIPTOR.message_types_by_name['DetectionRequest'] = _DETECTIONREQUEST

DetectionRequest = _reflection.GeneratedProtocolMessageType('DetectionRequest', (_message.Message,), dict(
  DESCRIPTOR = _DETECTIONREQUEST,
  __module__ = 'inference_service_pb2'
  # @@protoc_insertion_point(class_scope:orbb.DetectionRequest)
  ))
_sym_db.RegisterMessage(DetectionRequest)


try:
  # THESE ELEMENTS WILL BE DEPRECATED.
  # Please use the generated *_pb2_grpc.py files instead.
  import grpc
  from grpc.framework.common import cardinality
  from grpc.framework.interfaces.face import utilities as face_utilities
  from grpc.beta import implementations as beta_implementations
  from grpc.beta import interfaces as beta_interfaces


  class InferenceServiceStub(object):

    def __init__(self, channel):
      """Constructor.

      Args:
        channel: A grpc.Channel.
      """
      self.process = channel.unary_unary(
          '/orbb.InferenceService/process',
          request_serializer=DetectionRequest.SerializeToString,
          response_deserializer=orbb__metadata__pb2.Metadata.FromString,
          )


  class InferenceServiceServicer(object):

    def process(self, request, context):
      context.set_code(grpc.StatusCode.UNIMPLEMENTED)
      context.set_details('Method not implemented!')
      raise NotImplementedError('Method not implemented!')


  def add_InferenceServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
        'process': grpc.unary_unary_rpc_method_handler(
            servicer.process,
            request_deserializer=DetectionRequest.FromString,
            response_serializer=orbb__metadata__pb2.Metadata.SerializeToString,
        ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
        'orbb.InferenceService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


  class BetaInferenceServiceServicer(object):
    """The Beta API is deprecated for 0.15.0 and later.

    It is recommended to use the GA API (classes and functions in this
    file not marked beta) for all further purposes. This class was generated
    only to ease transition from grpcio<0.15.0 to grpcio>=0.15.0."""
    def process(self, request, context):
      context.code(beta_interfaces.StatusCode.UNIMPLEMENTED)


  class BetaInferenceServiceStub(object):
    """The Beta API is deprecated for 0.15.0 and later.

    It is recommended to use the GA API (classes and functions in this
    file not marked beta) for all further purposes. This class was generated
    only to ease transition from grpcio<0.15.0 to grpcio>=0.15.0."""
    def process(self, request, timeout, metadata=None, with_call=False, protocol_options=None):
      raise NotImplementedError()
    process.future = None


  def beta_create_InferenceService_server(servicer, pool=None, pool_size=None, default_timeout=None, maximum_timeout=None):
    """The Beta API is deprecated for 0.15.0 and later.

    It is recommended to use the GA API (classes and functions in this
    file not marked beta) for all further purposes. This function was
    generated only to ease transition from grpcio<0.15.0 to grpcio>=0.15.0"""
    request_deserializers = {
      ('orbb.InferenceService', 'process'): DetectionRequest.FromString,
    }
    response_serializers = {
      ('orbb.InferenceService', 'process'): orbb__metadata__pb2.Metadata.SerializeToString,
    }
    method_implementations = {
      ('orbb.InferenceService', 'process'): face_utilities.unary_unary_inline(servicer.process),
    }
    server_options = beta_implementations.server_options(request_deserializers=request_deserializers, response_serializers=response_serializers, thread_pool=pool, thread_pool_size=pool_size, default_timeout=default_timeout, maximum_timeout=maximum_timeout)
    return beta_implementations.server(method_implementations, options=server_options)


  def beta_create_InferenceService_stub(channel, host=None, metadata_transformer=None, pool=None, pool_size=None):
    """The Beta API is deprecated for 0.15.0 and later.

    It is recommended to use the GA API (classes and functions in this
    file not marked beta) for all further purposes. This function was
    generated only to ease transition from grpcio<0.15.0 to grpcio>=0.15.0"""
    request_serializers = {
      ('orbb.InferenceService', 'process'): DetectionRequest.SerializeToString,
    }
    response_deserializers = {
      ('orbb.InferenceService', 'process'): orbb__metadata__pb2.Metadata.FromString,
    }
    cardinalities = {
      'process': cardinality.Cardinality.UNARY_UNARY,
    }
    stub_options = beta_implementations.stub_options(host=host, metadata_transformer=metadata_transformer, request_serializers=request_serializers, response_deserializers=response_deserializers, thread_pool=pool, thread_pool_size=pool_size)
    return beta_implementations.dynamic_stub(channel, 'orbb.InferenceService', cardinalities, options=stub_options)
except ImportError:
  pass
# @@protoc_insertion_point(module_scope)
